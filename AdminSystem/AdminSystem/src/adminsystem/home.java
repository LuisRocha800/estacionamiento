package adminsystem;

import DaosApp.dao.app.ConexionEstatica;
import DaosApp.dao.app.dto.Pensionados;
import DaosApp.dao.app.dto.Personal;
import DaosApp.dao.app.dto.adminusers;
import DaosApp.dao.app.dto.cards;
import DaosApp.dao.app.dto.nfc_movements;
import DaosApp.dao.dao.derby.PensionadoDAODerbyImp;
import DaosApp.dao.dao.derby.PersonalDAODerbyImp;
import DaosApp.dao.dao.derby.adminusersDAODerbyImp;
import DaosApp.dao.dao.derby.cardsDaoDerbyImp;
import DaosApp.dao.dao.derby.nfc_movementsDaoDerbyImp;
import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Luis A. Rocha
 */
public class home extends javax.swing.JFrame {

    private static Connection conexion;
    
    public home() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo (null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearchPen3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        panelEncabezado = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtTagPersonal = new javax.swing.JTextField();
        txtApellidoPersonal = new javax.swing.JTextField();
        txtNombrePersonal = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnCrear = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        idtagPens = new javax.swing.JTextField();
        vigenciaPens = new javax.swing.JTextField();
        apellidoPens = new javax.swing.JTextField();
        nombrePens = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        comboTiempoSuscripcion = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        btnSearchPen = new javax.swing.JButton();
        btnActualizarPens = new javax.swing.JButton();
        btnRegistrarPens = new javax.swing.JButton();
        btnLimpiarPens = new javax.swing.JButton();
        btnEliminarPens = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtTagInvitado = new javax.swing.JTextField();
        btnSearchInv = new javax.swing.JButton();
        btnLimpiarInv = new javax.swing.JButton();
        btnClearInv = new javax.swing.JButton();
        btnUpdateInv = new javax.swing.JButton();
        btnEliminarInv = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        queryresult = new javax.swing.JTable();
        btnQuery = new javax.swing.JButton();
        selectMovement = new javax.swing.JComboBox<>();
        fechaConsul = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        rankpersonal = new javax.swing.JLabel();
        ocasionesPersonal = new javax.swing.JLabel();
        rankPensionado = new javax.swing.JLabel();
        ocasionesPensionado = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();

        btnSearchPen3.setBackground(new java.awt.Color(0, 107, 200));
        btnSearchPen3.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnSearchPen3.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchPen3.setText("Registrar");
        btnSearchPen3.setToolTipText("");
        btnSearchPen3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPen3ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        panelEncabezado.setBackground(new java.awt.Color(0, 107, 200));
        panelEncabezado.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 107, 200), 5, true));

        jLabel4.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("CONTROL DE ESTACIONAMIENTO");

        javax.swing.GroupLayout panelEncabezadoLayout = new javax.swing.GroupLayout(panelEncabezado);
        panelEncabezado.setLayout(panelEncabezadoLayout);
        panelEncabezadoLayout.setHorizontalGroup(
            panelEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEncabezadoLayout.createSequentialGroup()
                .addGap(395, 395, 395)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelEncabezadoLayout.setVerticalGroup(
            panelEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEncabezadoLayout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(44, 44, 44))
        );

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel1.setText("TAG CREDENCIAL: (unico)");

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel2.setText("NOMBRE:");

        jLabel3.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel3.setText("APELLIDO:");

        txtTagPersonal.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        txtApellidoPersonal.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        txtNombrePersonal.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        btnSearch.setBackground(new java.awt.Color(0, 107, 200));
        btnSearch.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Buscar");
        btnSearch.setToolTipText("");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnLimpiar.setBackground(new java.awt.Color(0, 107, 200));
        btnLimpiar.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setToolTipText("");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnCrear.setBackground(new java.awt.Color(0, 107, 200));
        btnCrear.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnCrear.setForeground(new java.awt.Color(255, 255, 255));
        btnCrear.setText("Registrar");
        btnCrear.setToolTipText("");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 107, 200));
        btnUpdate.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Actualizar");
        btnUpdate.setToolTipText("");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(0, 107, 200));
        btnEliminar.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.setToolTipText("");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTagPersonal)
                    .addComponent(txtNombrePersonal)
                    .addComponent(txtApellidoPersonal, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 244, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTagPersonal)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombrePersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApellidoPersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(179, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("CRUD Personal", jPanel2);

        jLabel6.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel6.setText("TAG CREDENCIAL: (unico)");

        jLabel7.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel7.setText("NOMBRE:");

        jLabel8.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel8.setText("APELLIDO:");

        jLabel9.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel9.setText("FECHA VIGENCIA SUSCRIPCION:");

        comboTiempoSuscripcion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguna", "30 Dias", "3 Meses", "6 Meses", "1 Año" }));
        comboTiempoSuscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTiempoSuscripcionActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel10.setText("EXTENSION SUSCRIPCION:");

        btnSearchPen.setBackground(new java.awt.Color(0, 107, 200));
        btnSearchPen.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnSearchPen.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchPen.setText("Buscar");
        btnSearchPen.setToolTipText("");
        btnSearchPen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPenActionPerformed(evt);
            }
        });

        btnActualizarPens.setBackground(new java.awt.Color(0, 107, 200));
        btnActualizarPens.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnActualizarPens.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizarPens.setText("Actualizar");
        btnActualizarPens.setToolTipText("");
        btnActualizarPens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPensActionPerformed(evt);
            }
        });

        btnRegistrarPens.setBackground(new java.awt.Color(0, 107, 200));
        btnRegistrarPens.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnRegistrarPens.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrarPens.setText("Registrar");
        btnRegistrarPens.setToolTipText("");
        btnRegistrarPens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarPensActionPerformed(evt);
            }
        });

        btnLimpiarPens.setBackground(new java.awt.Color(0, 107, 200));
        btnLimpiarPens.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnLimpiarPens.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiarPens.setText("Limpiar");
        btnLimpiarPens.setToolTipText("");
        btnLimpiarPens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarPensActionPerformed(evt);
            }
        });

        btnEliminarPens.setBackground(new java.awt.Color(0, 107, 200));
        btnEliminarPens.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnEliminarPens.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarPens.setText("Eliminar");
        btnEliminarPens.setToolTipText("");
        btnEliminarPens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPensActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idtagPens, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpiarPens, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSearchPen, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(vigenciaPens, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(comboTiempoSuscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(apellidoPens, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombrePens, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 373, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnActualizarPens, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminarPens, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(31, 31, 31))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(978, Short.MAX_VALUE)
                    .addComponent(btnRegistrarPens, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(30, 30, 30)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idtagPens)
                    .addComponent(btnSearchPen, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nombrePens, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnActualizarPens, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(apellidoPens, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(btnLimpiarPens, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vigenciaPens, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboTiempoSuscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnEliminarPens, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(81, 81, 81)
                    .addComponent(btnRegistrarPens, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(394, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("CRUD Pensionados", jPanel4);

        jLabel5.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel5.setText("TAG CREDENCIAL: (unico)");

        txtTagInvitado.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        btnSearchInv.setBackground(new java.awt.Color(0, 107, 200));
        btnSearchInv.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnSearchInv.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchInv.setText("Buscar");
        btnSearchInv.setToolTipText("");
        btnSearchInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchInvActionPerformed(evt);
            }
        });

        btnLimpiarInv.setBackground(new java.awt.Color(0, 107, 200));
        btnLimpiarInv.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnLimpiarInv.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiarInv.setText("Limpiar");
        btnLimpiarInv.setToolTipText("");
        btnLimpiarInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarInvActionPerformed(evt);
            }
        });

        btnClearInv.setBackground(new java.awt.Color(0, 107, 200));
        btnClearInv.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnClearInv.setForeground(new java.awt.Color(255, 255, 255));
        btnClearInv.setText("Registrar");
        btnClearInv.setToolTipText("");
        btnClearInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearInvActionPerformed(evt);
            }
        });

        btnUpdateInv.setBackground(new java.awt.Color(0, 107, 200));
        btnUpdateInv.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnUpdateInv.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateInv.setText("Actualizar");
        btnUpdateInv.setToolTipText("");
        btnUpdateInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateInvActionPerformed(evt);
            }
        });

        btnEliminarInv.setBackground(new java.awt.Color(0, 107, 200));
        btnEliminarInv.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnEliminarInv.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarInv.setText("Eliminar");
        btnEliminarInv.setToolTipText("");
        btnEliminarInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarInvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(228, 228, 228)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnLimpiarInv, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearInv, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateInv, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminarInv, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(txtTagInvitado, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchInv, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(177, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearchInv, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(txtTagInvitado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 270, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiarInv, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearInv, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateInv, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarInv, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63))
        );

        jTabbedPane2.addTab("CRUD Invitados", jPanel5);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        queryresult.setAutoCreateRowSorter(true);
        queryresult.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        queryresult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PERSONAL", "PENSIONADO", "INVITADO", "FECHA MOVIMIENTO", "HORA MOVIMIENTO", "STATUS", "TIPO MOVIMIENTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(queryresult);

        btnQuery.setBackground(new java.awt.Color(0, 107, 200));
        btnQuery.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnQuery.setForeground(new java.awt.Color(255, 255, 255));
        btnQuery.setText("Buscar");
        btnQuery.setToolTipText("");
        btnQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueryActionPerformed(evt);
            }
        });

        selectMovement.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        selectMovement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Entrada", "Salida" }));

        fechaConsul.setDateFormatString("yyyy-MM-dd");

        jLabel11.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel11.setText("TIPO MOVIMIENTO:");

        jLabel12.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel12.setText("FECHA ESPECIFICA:");

        rankpersonal.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N

        ocasionesPersonal.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N

        rankPensionado.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N

        ocasionesPensionado.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rankpersonal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ocasionesPersonal, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rankPensionado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ocasionesPensionado, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rankpersonal, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                    .addComponent(rankPensionado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ocasionesPersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ocasionesPensionado))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectMovement, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fechaConsul, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 382, Short.MAX_VALUE)
                        .addComponent(btnQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(selectMovement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12))
                    .addComponent(fechaConsul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Movimientos", jPanel3);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1191, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 484, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Movimientos Economicos", jPanel7);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jTabbedPane2.addTab("Business Intelligence", jPanel6);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        String tagid = txtTagPersonal.getText();
        String nombrePersonal = txtNombrePersonal.getText();
        String apellidoPersonal = txtApellidoPersonal.getText();
        
        String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try {
				
	            conexion = DriverManager.getConnection(url);
        		
             	
	            PersonalDAODerbyImp persDerb = new PersonalDAODerbyImp();
	            persDerb.setConexion(conexion);
	            Personal person = new Personal();
                    
                    if (!tagid.isEmpty()) {
	            person.setId_tag(tagid);
                    }
                    if (!nombrePersonal.isEmpty()) {
                    person.setNombre(nombrePersonal);
                    }
                    if (!apellidoPersonal.isEmpty()) {
                    person.setApellido(apellidoPersonal);
                    }
	            
	            person = persDerb.get(person);
                  
                    if(person == null){
                        JOptionPane.showMessageDialog(null, "NO EXISTE ESE USUARIO, INTENTA DE NUEVO");
                    }else{
                    txtTagPersonal.setText(person.getId_tag());
                    txtTagPersonal.setEnabled(false);
                    txtNombrePersonal.setText(person.getNombre());
                    txtApellidoPersonal.setText(person.getApellido());
                    }
				}catch(SQLException ex) {
				ex.printStackTrace();
			}
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtTagPersonal.setText("");
        txtNombrePersonal.setText("");
        txtApellidoPersonal.setText("");
        txtTagPersonal.setEnabled(true);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        String tagid = txtTagPersonal.getText();
        String nombrePersonal = txtNombrePersonal.getText();
        String apellidoPersonal = txtApellidoPersonal.getText();
        
        String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try{
            conexion = DriverManager.getConnection(url);
        		
             	
	            PersonalDAODerbyImp persDerb = new PersonalDAODerbyImp();
	            persDerb.setConexion(conexion);
	            Personal person = new Personal();
                    Personal person2 = new Personal();
                    
                    if (!tagid.isEmpty()) {
	            person.setId_tag(tagid);
                    }
                    if (!nombrePersonal.isEmpty()) {
                    person.setNombre(nombrePersonal);
                    }
                    if (!apellidoPersonal.isEmpty()) {
                    person.setApellido(apellidoPersonal);
                    }
                    
                    person = persDerb.get(person);
                    
                    System.out.println("RES PERSON "+person.getId_tag());
                    
                    if(person.getId_tag() == null){
                        
                    if(tagid.isEmpty() || nombrePersonal.isEmpty() || apellidoPersonal.isEmpty()){
                        JOptionPane.showMessageDialog(null, "ERROR! LLENA TODOS LOS CAMPOS");
                    }else{
                        person2.setId_tag(tagid);
                        person2.setNombre(nombrePersonal);
                        person2.setApellido(apellidoPersonal);
                        
                        persDerb.create(person2);
                        
                        JOptionPane.showMessageDialog(null, "USUARIO CREADO CON EXITO");
                    } 
                    }else{
                     JOptionPane.showMessageDialog(null, "ERROR! EL USUARIO YA SE ENCUENTRA REGISTRADO");   
                    }
        }catch(SQLException ex) {
         ex.printStackTrace();
	}
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String tagid = txtTagPersonal.getText();
        String nombrePersonal = txtNombrePersonal.getText();
        String apellidoPersonal = txtApellidoPersonal.getText();
        
        String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try {
				
	            conexion = DriverManager.getConnection(url);
        		
             	
	            PersonalDAODerbyImp persDerb = new PersonalDAODerbyImp();
	            persDerb.setConexion(conexion);
	            Personal person = new Personal();
                                        
                    if(tagid.isEmpty() || nombrePersonal.isEmpty() || apellidoPersonal.isEmpty()){
                        JOptionPane.showMessageDialog(null, "LLENA TODOS LOS CAMPOS");
                    }else{

                    person.setNombre(nombrePersonal);
                    person.setApellido(apellidoPersonal);
	            person.setId_tag(tagid);

                    persDerb.update(person);
                    JOptionPane.showMessageDialog(null, "PERSONAL ACTUALIZADO CON EXITO");
                    txtTagPersonal.setEnabled(true);
                    txtTagPersonal.setText("");
                    txtNombrePersonal.setText("");
                    txtApellidoPersonal.setText("");
                    }
				}catch(SQLException ex) {
				ex.printStackTrace();
			}
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        String tagid = txtTagPersonal.getText();
        String nombrePersonal = txtNombrePersonal.getText();
        String apellidoPersonal = txtApellidoPersonal.getText();
        
        String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try{
            conexion = DriverManager.getConnection(url);
        		
             	
	            PersonalDAODerbyImp persDerb = new PersonalDAODerbyImp();
	            persDerb.setConexion(conexion);
	            Personal person = new Personal();
                    
                    if (!tagid.isEmpty()) {
	            person.setId_tag(tagid);
                    }
                    if (!nombrePersonal.isEmpty()) {
                    person.setNombre(nombrePersonal);
                    }
                    if (!apellidoPersonal.isEmpty()) {
                    person.setApellido(apellidoPersonal);
                    }
                    
                    person = persDerb.get(person);
                    
                    if(person.getId_tag() == null){
                        JOptionPane.showMessageDialog(null, "NO EXISTE ESE USUARIO, INTENTA DE NUEVO");
                    }else{
                        persDerb.delete(person);
                        JOptionPane.showMessageDialog(null, "USUARIO ELIMINADO CON EXITO");
                    }
                    
        }catch(SQLException ex) {
         ex.printStackTrace();
	}
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnSearchInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchInvActionPerformed
       String tagidInv = txtTagInvitado.getText();
       
       String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try{
            conexion = DriverManager.getConnection(url);
        		
	            cardsDaoDerbyImp cardsDerb = new cardsDaoDerbyImp();
	            cardsDerb.setConexion(conexion);
	            cards crds = new cards();
                    
                    if(tagidInv.isEmpty()){
                     JOptionPane.showMessageDialog(null, "LLENA EL CAMPO");   
                    }else{
                        crds.setId_tag(tagidInv);
                        
                        crds = cardsDerb.get(crds);
                        
                        if(crds.getId_tag() == null){
                         JOptionPane.showMessageDialog(null, "NO EXISTE ESE TAG ASOCIADO A UNA TARJETA");   
                        }else{
                         JOptionPane.showMessageDialog(null, "YA EXISTE ESE TAG ASOCIADO A UNA TARJETA");   
                        }
                    }               
        }catch(SQLException e){
                e.printStackTrace();
                }
    }//GEN-LAST:event_btnSearchInvActionPerformed

    private void btnLimpiarInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarInvActionPerformed
        txtTagInvitado.setText("");
    }//GEN-LAST:event_btnLimpiarInvActionPerformed

    private void btnClearInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearInvActionPerformed
               String tagidInv = txtTagInvitado.getText();
       
       String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try{
            conexion = DriverManager.getConnection(url);
        		
	            cardsDaoDerbyImp cardsDerb = new cardsDaoDerbyImp();
	            cardsDerb.setConexion(conexion);
	            cards crds = new cards();
                    
                    if(tagidInv.isEmpty()){
                     JOptionPane.showMessageDialog(null, "LLENA EL CAMPO");   
                    }else{
                        crds.setId_tag(tagidInv);
                        
                        crds = cardsDerb.get(crds);
                        
                        if(crds.getId_tag() == null){
                          crds.setId_tag(tagidInv);
                          crds.setEstatus("DISPONIBLE");
                          
                          crds = cardsDerb.create(crds);
                         JOptionPane.showMessageDialog(null, "TARJETA REGISTRADA CON EXITO");   
                        }else{
                         JOptionPane.showMessageDialog(null, "YA EXISTE ESE TAG ASOCIADO A UNA TARJETA");   
                        }
                    }               
        }catch(SQLException e){
                e.printStackTrace();
                }
    }//GEN-LAST:event_btnClearInvActionPerformed

    private void btnUpdateInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateInvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateInvActionPerformed

    private void btnEliminarInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarInvActionPerformed
       String tagidInv = txtTagInvitado.getText();
       
       String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try{
            conexion = DriverManager.getConnection(url);
        		
	            cardsDaoDerbyImp cardsDerb = new cardsDaoDerbyImp();
	            cardsDerb.setConexion(conexion);
	            cards crds = new cards();
                    
                    if(tagidInv.isEmpty()){
                     JOptionPane.showMessageDialog(null, "LLENA EL CAMPO");   
                    }else{
                        crds.setId_tag(tagidInv);
                        
                        crds = cardsDerb.get(crds);
                        
                        if(crds.getId_tag() == null){
                         JOptionPane.showMessageDialog(null, "EL TAG NO ESTA ASOCIADO A UNA TARJETA REGISTRADA");   
                        }else{
                         
                         crds.setId_tag(tagidInv);
                         
                          cardsDerb.delete(crds);
                         JOptionPane.showMessageDialog(null, "TARJETA ELIMINADA CON EXITO");   
                        }
                    }               
        }catch(SQLException e){
                e.printStackTrace();
                }
    }//GEN-LAST:event_btnEliminarInvActionPerformed

    private void comboTiempoSuscripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTiempoSuscripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTiempoSuscripcionActionPerformed

    private void btnSearchPenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPenActionPerformed
        
        String tagid = idtagPens.getText();
        String nombrePensionado = nombrePens.getText();
        String apellidoPensionado = apellidoPens.getText();
        String vigenciatarjeta = vigenciaPens.getText();
        
        String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try {
				
	            conexion = DriverManager.getConnection(url);
        		
             	
	            PensionadoDAODerbyImp pensDerb = new PensionadoDAODerbyImp();
	            pensDerb.setConexion(conexion);
	            Pensionados pension = new Pensionados();
                    
                    if (!tagid.isEmpty()) {
	            pension.setId_tag(tagid);
                    }
                    if (!nombrePensionado.isEmpty()) {
                    pension.setNombre(nombrePensionado);
                    }
                    if (!apellidoPensionado.isEmpty()) {
                    pension.setApellido(apellidoPensionado);
                    }
                    if (!vigenciatarjeta.isEmpty()) {
                    pension.setApellido(vigenciatarjeta);
                    }
	            
	            pension = pensDerb.get(pension);
                  
                    if(pension == null){
                        JOptionPane.showMessageDialog(null, "NO EXISTE ESE USUARIO, INTENTA DE NUEVO");
                    }else{
                    idtagPens.setText(pension.getId_tag());
                    idtagPens.setEnabled(false);
                    nombrePens.setText(pension.getNombre());
                    apellidoPens.setText(pension.getApellido());
                    vigenciaPens.setText(pension.getVigencia_tarjeta());
                    vigenciaPens.setEnabled(false);
                    }
				}catch(SQLException ex) {
				ex.printStackTrace();
			}
    }//GEN-LAST:event_btnSearchPenActionPerformed

    private void btnActualizarPensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPensActionPerformed
       Date fechaDate = null;
        
        String tagidPensionado = idtagPens.getText();
        String nombrePensionado = nombrePens.getText();
        String apellidoPensionado = apellidoPens.getText();
        String vigenciasuscripcion = vigenciaPens.getText();
        
        String seleccion = (String) comboTiempoSuscripcion.getSelectedItem();
        int mesesASumar = 0;

        switch (seleccion) {
            case "30 Dias":
                mesesASumar = 1;
                break;
            case "3 Meses":
                mesesASumar = 3;
                break;
            case "6 Meses":
                mesesASumar = 6;
                break;
            case "1 Año":
                mesesASumar = 12;
                break;
            
            default:
                break;
        }
     
         String formatoFecha = "yyyy-MM-dd";

        SimpleDateFormat formato = new SimpleDateFormat(formatoFecha);

        try {
            fechaDate = formato.parse(vigenciasuscripcion);
        } catch (ParseException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
        Date fecha;
        fecha = fechaDate;
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fechaDate);
        calendar.add(Calendar.MONTH, mesesASumar);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String fechaResultado = dateFormat.format(calendar.getTime());

        System.out.println("FECHA "+ fechaResultado);

        String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try {
				
	            conexion = DriverManager.getConnection(url);
        		
             	
	            PensionadoDAODerbyImp pensDerb = new PensionadoDAODerbyImp();
	            pensDerb.setConexion(conexion);
	            Pensionados pension = new Pensionados();
                                        
                    if(tagidPensionado.isEmpty() || nombrePensionado.isEmpty() || apellidoPensionado.isEmpty()){
                        JOptionPane.showMessageDialog(null, "LLENA TODOS LOS CAMPOS");
                    }else{

                    pension.setNombre(nombrePensionado);
                    pension.setApellido(apellidoPensionado);
                    pension.setVigencia_tarjeta(fechaResultado);
	            pension.setId_tag(tagidPensionado);
                    

                    pensDerb.update(pension);
                    JOptionPane.showMessageDialog(null, "PERSONAL ACTUALIZADO CON EXITO");
                    idtagPens.setEnabled(true);
                    idtagPens.setText("");
                    nombrePens.setText("");
                    apellidoPens.setText("");
                    vigenciaPens.setText("");
                            
                    }
				}catch(SQLException ex) {
				ex.printStackTrace();
			}
    }//GEN-LAST:event_btnActualizarPensActionPerformed

    private void btnRegistrarPensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarPensActionPerformed
        String tagidPensionado = idtagPens.getText();
        String nombrePensionado = nombrePens.getText();
        String apellidoPensionado = apellidoPens.getText();
        
        String seleccion = (String) comboTiempoSuscripcion.getSelectedItem();
        int mesesASumar = 0;

        switch (seleccion) {
            case "30 Dias":
                mesesASumar = 1;
                break;
            case "3 Meses":
                mesesASumar = 3;
                break;
            case "6 Meses":
                mesesASumar = 6;
                break;
            case "1 Año":
                mesesASumar = 12;
                break;
            // Para "Ninguno" no sumamos ningún mes
            default:
                break;
        }
     
        Date fechaActual = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fechaActual);
        calendar.add(Calendar.MONTH, mesesASumar);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String fechaResultado = dateFormat.format(calendar.getTime());

        System.out.println("FECHA "+ fechaResultado);
        vigenciaPens.setText(fechaResultado);
        
        String vigenciasuscripcion = vigenciaPens.getText();
        
        String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try{
            conexion = DriverManager.getConnection(url);
        		
             	
	            PensionadoDAODerbyImp pensDerb = new PensionadoDAODerbyImp();
	            pensDerb.setConexion(conexion);
	            Pensionados pension1 = new Pensionados();
                    Pensionados pension2 = new Pensionados();
                    
                    if (!tagidPensionado.isEmpty()) {
	            pension1.setId_tag(tagidPensionado);
                    }
                    if (!nombrePensionado.isEmpty()) {
                    pension1.setNombre(nombrePensionado);
                    }
                    if (!apellidoPensionado.isEmpty()) {
                    pension1.setApellido(apellidoPensionado);
                    }
                    if (!vigenciasuscripcion.isEmpty()) {
                    pension1.setVigencia_tarjeta(vigenciasuscripcion);
                    }
                    
                    pension1 = pensDerb.get(pension1);
                    
                    System.out.println("RES PERSON "+pension1.getId_tag());
                    
                    if(pension1.getId_tag() == null){
                        
                    if(tagidPensionado.isEmpty() || nombrePensionado.isEmpty() || apellidoPensionado.isEmpty()){
                        JOptionPane.showMessageDialog(null, "ERROR! LLENA TODOS LOS CAMPOS");
                    }else{
                        pension2.setId_tag(tagidPensionado);
                        pension2.setNombre(nombrePensionado);
                        pension2.setApellido(apellidoPensionado);
                        pension2.setVigencia_tarjeta(vigenciasuscripcion);
                        
                        pensDerb.create(pension2);
                        
                        JOptionPane.showMessageDialog(null, "USUARIO CREADO CON EXITO");
                    } 
                    }else{
                     JOptionPane.showMessageDialog(null, "ERROR! EL USUARIO YA SE ENCUENTRA REGISTRADO");   
                    }
        }catch(SQLException ex) {
         ex.printStackTrace();
	}
    }//GEN-LAST:event_btnRegistrarPensActionPerformed

    private void btnSearchPen3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPen3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchPen3ActionPerformed

    private void btnLimpiarPensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarPensActionPerformed
        idtagPens.setText("");
        nombrePens.setText("");
        apellidoPens.setText("");
        vigenciaPens.setText("");
    }//GEN-LAST:event_btnLimpiarPensActionPerformed

    private void btnEliminarPensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPensActionPerformed
       String tagidPen = idtagPens.getText();
       
       String url = ConexionEstatica.CONEXION_CREDENTIALS;
        
        try{
            conexion = DriverManager.getConnection(url);
        		
	            PensionadoDAODerbyImp pensDerb = new PensionadoDAODerbyImp();
	            pensDerb.setConexion(conexion);
	            Pensionados pens = new Pensionados();
                    
                    if(tagidPen.isEmpty()){
                     JOptionPane.showMessageDialog(null, "LLENA EL CAMPO");   
                    }else{
                        pens.setId_tag(tagidPen);
                        
                        pens = pensDerb.get(pens);
                        
                        if(pens.getId_tag() == null){
                         JOptionPane.showMessageDialog(null, "EL TAG NO ESTA ASOCIADO A UNA TARJETA REGISTRADA");   
                        }else{
                         
                         pens.setId_tag(tagidPen);
                         
                          pensDerb.delete(pens);
                         JOptionPane.showMessageDialog(null, "TARJETA ELIMINADA CON EXITO");   
                        }
                    }               
        }catch(SQLException e){
                e.printStackTrace();
                }
    }//GEN-LAST:event_btnEliminarPensActionPerformed

    private void btnQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueryActionPerformed
       DefaultTableModel modelo = (DefaultTableModel) queryresult.getModel();
       modelo.setRowCount(0);
       
       List<nfc_movements> nfc2 = new ArrayList<>();
        
       String url = ConexionEstatica.CONEXION_CREDENTIALS;
		
       try {
				
       conexion = DriverManager.getConnection(url);
       
                    
       nfc_movementsDaoDerbyImp derb = new nfc_movementsDaoDerbyImp();
       derb.setConexion(conexion);
                    
       nfc_movements nfc = new nfc_movements();

       String seleccion = (String) selectMovement.getSelectedItem();
       String opcion = null;

       switch (seleccion) {
            case "Entrada":
                opcion = "ingreso";
                break;
            case "Salida":
                opcion = "salida";
                break;
            case "Todos":
                opcion = null;
                break;
            default:
                break;
        }

        if(opcion != null){
         nfc.setTipe_movement(opcion);   
        }

         Date selectedDate = fechaConsul.getDate();
         
        if(selectedDate != null){
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String dateString = dateFormat.format(selectedDate);
        nfc.setDate_mov(dateString);
        }
        
        nfc2 = derb.get(nfc);
        
        DefaultTableModel model = (DefaultTableModel) queryresult.getModel();
                    
        for(nfc_movements movement : nfc2){
            Object[] rowData = {
                movement.getId_tag_personal(),
                movement.getId_tag_pensionado(),
                movement.getId_tag_invitado(),
                movement.getDate_mov(),
                movement.getTime_mov(),
                movement.getStatus(),
                movement.getTipe_movement()
            };
            
            model.addRow(rowData);
        }
        
        autoResizeAllColumns(queryresult);
       
            }catch(SQLException ex) {
		ex.printStackTrace();
	}
       
               // Map para contar la frecuencia de id_tag_personal
        Map<String, Integer> frecuenciaIdTagPersonal = new HashMap<>();

        // Contar la frecuencia
        for (nfc_movements movimiento : nfc2) {
            String idTagPersonal = movimiento.getId_tag_personal();

            // Ignorar el valor "None"
            if (idTagPersonal != null && !idTagPersonal.equals("None")) {
                frecuenciaIdTagPersonal.put(idTagPersonal, frecuenciaIdTagPersonal.getOrDefault(idTagPersonal, 0) + 1);
            }
        }
        
        String idTagPersonalMasRepetido = null;
        int maxFrecuencia = 0;

        for (Map.Entry<String, Integer> entry : frecuenciaIdTagPersonal.entrySet()) {
            if (entry.getValue() > maxFrecuencia) {
                maxFrecuencia = entry.getValue();
                idTagPersonalMasRepetido = entry.getKey();
            }
        }
        
        //
                       // Map para contar la frecuencia de id_tag_personal
        Map<String, Integer> frecuenciaIdTagPensionado = new HashMap<>();
                          
        // Contar la frecuencia
        for (nfc_movements movimiento2 : nfc2) {
            String idTagPensionado = movimiento2.getId_tag_pensionado();

            // Ignorar el valor "None"
            if (idTagPensionado != null && !idTagPensionado.equals("None")) {
                frecuenciaIdTagPensionado.put(idTagPensionado, frecuenciaIdTagPensionado.getOrDefault(idTagPensionado, 0) + 1);
            }
        }
        
        String idTagPensionadoMasRepetido = null;
        int maxFrecuenciaPens = 0;

        for (Map.Entry<String, Integer> entry : frecuenciaIdTagPensionado.entrySet()) {
            if (entry.getValue() > maxFrecuenciaPens) {
                maxFrecuenciaPens = entry.getValue();
                idTagPensionadoMasRepetido = entry.getKey();
            }
        }
        //

        if(idTagPersonalMasRepetido != null){
        try {
            
        conexion = DriverManager.getConnection(url);
        
        PersonalDAODerbyImp personDerby = new PersonalDAODerbyImp();
        personDerby.setConexion(conexion);
        Personal personal2 = new Personal();      
        personal2.setId_tag(idTagPersonalMasRepetido);
        personal2 = personDerby.get(personal2);
        
        rankpersonal.setText("NOMBRE: " + personal2.getNombre()+" "+personal2.getApellido()+"   |   ID CARD: "+personal2.getId_tag());
        ocasionesPersonal.setText("USO DEL SERVICIO: " + maxFrecuencia+" ocasiones");
        //conexion.close();
        } catch(SQLException ex){
            ex.printStackTrace();
        } 
        }else{
        rankpersonal.setText("NOMBRE:  " +  "   |   ID CARD:");
        ocasionesPersonal.setText("USO DEL SERVICIO: ");
        }

        if(idTagPensionadoMasRepetido != null){
        try {
            
        conexion = DriverManager.getConnection(url);
        
        PensionadoDAODerbyImp pensionaDerby = new PensionadoDAODerbyImp();
        pensionaDerby.setConexion(conexion);
        Pensionados pensionado2 = new Pensionados();      
        pensionado2.setId_tag(idTagPensionadoMasRepetido);
        pensionado2 = pensionaDerby.get(pensionado2);
        
        rankPensionado.setText("NOMBRE: " + pensionado2.getNombre()+" "+pensionado2.getApellido()+"   |   ID CARD: "+pensionado2.getId_tag());
        ocasionesPensionado.setText("USO DEL SERVICIO: " + maxFrecuenciaPens+" ocasiones");
        
        } catch(Exception ex){
            ex.printStackTrace();
        }
        }else{
        rankPensionado.setText("NOMBRE:  " +  "   |   ID CARD:");
        ocasionesPensionado.setText("USO DEL SERVICIO: ");  
        }

    }//GEN-LAST:event_btnQueryActionPerformed
        
   private void autoResizeAllColumns(JTable table) {
    for (int column = 0; column < table.getColumnCount(); column++) {
        TableColumn tableColumn = table.getColumnModel().getColumn(column);
        int preferredWidth = tableColumn.getMinWidth();
        int maxWidth = tableColumn.getMaxWidth();

        for (int row = 0; row < table.getRowCount(); row++) {
            TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
            Component c = table.prepareRenderer(cellRenderer, row, column);
            int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
            preferredWidth = Math.max(preferredWidth, width);

            // Si hemos excedido el ancho máximo, rompemos el bucle
            if (preferredWidth >= maxWidth) {
                preferredWidth = maxWidth;
                break;
            }
        }

        tableColumn.setPreferredWidth(preferredWidth);
    
      }
    }
    
    public void tema() {

                java.awt.EventQueue.invokeLater(() -> {
           try {
             
                   UIManager.setLookAndFeel(new FlatIntelliJLaf());
               
               new home().setVisible(true);
               
           } catch(UnsupportedLookAndFeelException ex){
               Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
              
           }
           

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField apellidoPens;
    private javax.swing.JButton btnActualizarPens;
    private javax.swing.JButton btnClearInv;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminarInv;
    private javax.swing.JButton btnEliminarPens;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnLimpiarInv;
    private javax.swing.JButton btnLimpiarPens;
    private javax.swing.JButton btnQuery;
    private javax.swing.JButton btnRegistrarPens;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchInv;
    private javax.swing.JButton btnSearchPen;
    private javax.swing.JButton btnSearchPen3;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateInv;
    private javax.swing.JComboBox<String> comboTiempoSuscripcion;
    private com.toedter.calendar.JDateChooser fechaConsul;
    private javax.swing.JTextField idtagPens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField nombrePens;
    private javax.swing.JLabel ocasionesPensionado;
    private javax.swing.JLabel ocasionesPersonal;
    private javax.swing.JPanel panelEncabezado;
    private javax.swing.JTable queryresult;
    private javax.swing.JLabel rankPensionado;
    private javax.swing.JLabel rankpersonal;
    private javax.swing.JComboBox<String> selectMovement;
    private javax.swing.JTextField txtApellidoPersonal;
    private javax.swing.JTextField txtNombrePersonal;
    private javax.swing.JTextField txtTagInvitado;
    private javax.swing.JTextField txtTagPersonal;
    private javax.swing.JTextField vigenciaPens;
    // End of variables declaration//GEN-END:variables
}
